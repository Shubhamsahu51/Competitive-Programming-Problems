Given a string S, find the number of different non-empty palindromic subsequences in S, and return that number modulo 10^9 + 7.

A subsequence of a string S is obtained by deleting 0 or more characters from S.

A sequence is palindromic if it is equal to the sequence reversed.

Two sequences A_1, A_2, ... and B_1, B_2, ... are different if there is some i for which A_i != B_i.

Example 1:
Input: 
S = 'bccb'
Output: 6
Explanation: 
The 6 different non-empty palindromic subsequences are 'b', 'c', 'bb', 'cc', 'bcb', 'bccb'.
Note that 'bcb' is counted only once, even though it occurs twice.
Example 2:
Input: 
S = 'abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba'
Output: 104860361
Explanation: 
There are 3104860382 different non-empty palindromic subsequences, which is 104860361 modulo 10^9 + 7.
Note:

The length of S will be in the range [1, 1000].
Each character S[i] will be in the set {'a', 'b', 'c', 'd'}.
****************************************************************************Solution************************************************
class Solution {
public:
    
    bool isPalindrome(string op) 
    {
    int x=0;
    int y=op.length()-1;
    while(x <= y) {
      if(op[x] != op[y])
        return false;
      
      x++;
      y--;
    }
    
    return true;
  }
    void subseq(string ip,string op,long long &count) {
    
    if (ip.length()==0) {
        
        if (isPalindrome(op)&&op.size()!=0) 
        {
          count++;
          return;
        }
        return ;
        
    }
    string op1=op;
    string op2=op;
    op2.push_back(ip[0]);
    ip.erase(ip.begin()+0);
    subseq(ip,op1,count);
    subseq(ip,op2,count);
    
}
    int countPalindromicSubsequences(string S)
    {
       //Your code here
       long long  count =0 ;
       subseq(S,"",count);
       return count;
    }
        
    
};
