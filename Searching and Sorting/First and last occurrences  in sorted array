

Given a sorted array arr containing n elements with possibly duplicate elements, the task is to find indexes of first and last occurrences of an element x in the given array.

Example 1:

Input:
n=9, x=5
arr[] = { 1, 3, 5, 5, 5, 5, 67, 123, 125 }
Output:  2 5
Explanation: First occurrence of 5 is at index 2 and last
             occurrence of 5 is at index 5. 

*****************************************************************************Solution***********************************************************
int firstocc(int a[],int n,int key) {
    int l=0,h=n;
    while (l<=h) {
        int mid=(l+h)/2;
        
        
        if (a[mid]>key) 
        h=mid-1;
        else if (a[mid]<key)
        l=mid+1;
        else {
            if (mid==0 or a[mid]!=a[mid-1])
                return mid;
            else 
            h=mid-1;
        }
    }
    return -1;
}

int lastocc (int a[],int n,int key) {
    int l=0,h=n;
    while (l<=h) {
        int mid=(l+h)/2;
        
        if (a[mid]>key) 
        h=mid-1;
        else if (a[mid]<key)
        l=mid+1;
        else {
            if (mid==n or a[mid]!=a[mid+1])
                return mid;
            else 
            l=mid+1;
        }
        
    }
    return -1;
}
vector<int> find(int arr[], int n , int x )
{
    vector<int>ans;
    int first=firstocc(arr,n-1,x);
    ans.push_back(first);
    int last=lastocc(arr,n-1,x);
    ans.push_back(last);
    return ans;
}
