Given an array arr[] and a number K where K is smaller than size of array, the task is to find the Kth smallest element in the given array. It is given that all array elements are distinct.

Example 1:

Input:
N = 6
arr[] = 7 10 4 3 20 15
K = 3
Output : 7
Explanation :
3rd smallest element in the given 
array is 7.
Example 2:

Input:
N = 5
arr[] = 7 10 4 20 15
K = 4
Output : 15
Explanation :
4th smallest element in the given 
array is 15.
Your Task:
You don't have to read input or print anything. Your task is to complete the function kthSmallest() which takes the array, it's size and an integer k as input and returns the kth smallest element.
 
 
Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1)
Constraints:
1 <= N <= 105
1 <= arr[i] <= 105
1 <= K <= N
**************************************************************************Solution********************************************************************
I) BF-O(nlogn)

class Solution {
public:
    
    int findKthLargest(vector<int>& nums, int k) {
        vector <int> v(nums);
    sort(v.begin(),v.end();
    return v[k-1];
    }
};

II) Quick sort partition function-O(n) avg,worst=O(n^2)

// arr : given array
// l : starting index of the array i.e 0
// r : ending index of the array i.e size-1
// k : find kth smallest element and return using this function
int partition (int a[],int l,int h) {                  //quick sort partition function
    int pivot=a[l];
    int i=l,j=h;
    do {
        do {
            i++;
        }while (a[i] < pivot);
        
        do {
            j--;
        }while (a[j] > pivot);
    
        if (i < j)  
            swap (a[i],a[j]);
    }while (i<j);
    
    return j;                                           //return partion index  
}

int kthSmallest(int arr[], int l, int r, int k) {
   
    while (l<=r)  {
        int p=partition(arr,l,r);                     //pth smallest element position
        if (p==k-1)
            return arr[p];
        else if (p>k-1) 
            r=p-1;
        else
            l=p+1;
    }
    return -1;
        
}
