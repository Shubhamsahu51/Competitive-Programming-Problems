Count of unique pairs (i, j) in an array such that sum of A[i] and reverse of A[j] is equal to sum of reverse of A[i] and A[j]

Given an array arr[] consisting of N positive integers, the task is to find the count of unique pairs (i, j) such that the sum of arr[i] and the reverse(arr[j]) is same as the sum of reverse(arr[i]) and arr[j].

Examples:

Input: arr[] = {2, 15, 11, 7}
Output: 3
Explanation:
The pairs are (0, 2), (0, 3) and (2, 3). 
 

(0, 2): arr[0] + reverse(arr[2]) (= 2 + 11 = 211) and reverse(arr[0]) + arr[2](= 2 + 11 = 211).
(0, 3): arr[0] + reverse(arr[3]) (= 2 + 7 = 27) and reverse(arr[0]) + arr[3](= 2 + 7 = 27).
(2, 3): arr[2] + reverse(arr[3]) (= 11 + 7 = 117) and reverse(arr[2]) + arr[3](= 11 + 7 = 117).
Input: A[] = {22, 115, 7, 313, 17, 23, 22}
Output: 6


******************************************************Solution*********************************************************************

/ C++ program for the above approach
#include <bits/stdc++.h>
using namespace std;
 
// Function to find the
// reverse of the number n
int reverse(int n)
{
    int temp = n, rev = 0, r;
 
    // Iterate until temp is 0
    while (temp) {
 
        r = temp % 10;
        rev = rev * 10 + r;
        temp /= 10;
    }
 
    // Return the reversed number
    return rev;
}
 
// Function to count number of unique
// pairs (i, j) from the array A[]
// which satisfies the given condition
void countPairs(int A[], int N)
{
    // Store the frequency of keys
    // as A[i] - reverse(A[i])
    unordered_map<int, int> u_map;
 
    // Stores count of desired pairs
    int pairs = 0;
 
    // Iterate the array A[]
    for (int i = 0; i < N; i++) {
 
        int val = A[i] - reverse(A[i]);
 
        // Add frequency of val
        // to the required answer
        pairs += u_map[val];
 
        // Increment frequency of val
        u_map[val]++;
    }
 
    // Print the number of pairs
    cout << pairs;
}
 
// Driver Code
int main()
{
    int arr[] = { 2, 15, 11, 7 };
    int N = sizeof(arr) / sizeof(arr[0]);
 
    // Function Call
    countPairs(arr, N);
 
    return 0;
}
