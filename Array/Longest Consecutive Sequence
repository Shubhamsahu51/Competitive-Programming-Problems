Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.

 

Example 1:

Input: nums = [100,4,200,1,3,2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.
Example 2:

Input: nums = [0,3,7,2,5,8,4,6,0,1]
Output: 9
 

Constraints:

0 <= nums.length <= 104
-109 <= nums[i] <= 109
****************************************************************************************Solution*********************************************

i)BF-O(nlogn)
class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        if (nums.size()==0)
            return 0;
        sort(nums.begin(),nums.end());
        int res=1;
        int curr=1;
        for (int i=1;i<nums.size();i++) {
            if (nums[i]==nums[i-1])
                continue;
            if (nums[i]==nums[i-1]+1) {
                curr++;
            }
            else {
                res=max(curr,res);
                curr=1;
            }
        }
        res=max(res,curr);
        return res;
    }
};

ii)
class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        int res=0;
        int curr;
        unordered_set<int>h;
        for (int i=0;i<nums.size();i++) {
            h.insert(nums[i]);
        }
        for (int i=0;i<nums.size();i++) {
            if (h.find(nums[i]-1)!=h.end()) {
                curr=1;
                while (h.find(nums[i]+1)!=h.end())
                    curr++;
                res=max(res,curr);
        
            }
        }
        return res;
    }
};
